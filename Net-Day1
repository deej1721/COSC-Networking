------------------------------------------------------------------------------------------------------------------------
COSC NETWORKING DAY 1 GENERAL LINKS
RECOMMENDED RESOURCE: MIRO WHITEBOARD: https://miro.com/app/board/o9J_klSqCSY=/
NETWORKING GUIDE: https://net.cybbh.io/public/networking/latest/index.html
CTFD-2: ( THE SERVER WE USE )
  URL: http://networking-ctfd-2.server.vta:8000/
  IP: http://10.50.23.147:8000/
Practice Server
  URL: http://networking-practice-ctfd.server.vta:8000/
  IP: http://10.50.21.30:8000/
STUDENT ANTORA: https://cctc.cybbh.io/students/students/latest/index.html
PUTTY DOWNLOAD: https://www.putty.org/
WSL2: https://docs.microsoft.com/en-us/windows/wsl/install-win10
XMING:
  DOWNLOAD: http://www.geo.mtu.edu/geoschem/docs/putty_install.html
  NOTES: http://www.straightrunning.com/XmingNotes/
PACKET CAPTURE LINKS:
  https://packetlife.net/captures/
  https://wiki.wireshark.org/SampleCaptures
  https://github.com/chrissanders/packets
  https://www.cloudshark.org/collections/_7QxUxkDFulYsJ_ZI_0xHg
LINUX FILE PERM INFO:https://onedrive.live.com/view.aspx?resid=2F6F542CFFBDFABC!28524&ithint=file%2cxlsx&authkey=!AA2N-oRQQLqoSGQ
------------------------------------------------------------------------------------------------------------------------
DAY 1 MODULE NOTES
CONSULT MODULE NETWORK MAP:
  -INTERACTION AND COMMS OCCUR ON BLUE SPACE FIRST
  -ENUMERATION OCCURS IN RED SPACE
TYPICALLY, DCO-IDM IS CONCERNED WITH OSI MODEL LAYERS 3 AND ABOVE AS LAYERS 1 AND 2 ARE MORE INFRASTRUCTURAL IN NATURE
------------------------------------------------------------------------------------------------------------------------
NETWORKING FUN(DAMENTALS) NOTES
RECALL BINARY BASICS (NUMBER LINE METHOD)
  DECIMAL VALUE... 8 4 2 1
  BINARY VALUE...  0 1 1 1
  THUS, BINARY 0111 = DECIMAL 7 
RECALL HEX BASICS (BASE 16, 0-15)
  DEC VALUE: 15
  HEX VALUE: F
BINARY IDENTIFICATION:
  1 bit...     1/8 a byte
  1 nibble...  4 bits OR half a byte
  1 byte...    8 bits
  half word... 16 bits OR 2 bytes
  word...      32 bits OR 4 bytes

OSI MODEL:
1-APPLICATION:  (DATA) PROTOCOL: HTTP, FTP, ETC ETC
2-PRESENTATION: (DATA) FILE EXTENSION/FORMAT 
3-SESSION:      (DATA) NAMED PIPE,NETBIOS,NET-BEUI,SOCKS,RPC,RTP,L2F,PPTP,L2TP
4-TRANSPORT:    (SEGMENT / DATAGRAM) TCP/UDP
5-NETWORK:      (PACKET) ROUTING PROTOCOLS: IPv4,IPv6,RIP,EIGRP,BGP,OSPF,IS-IS,ICMP,ICMPv6,IPSec
6-DATA LINK:    (FRAMES) LAN,MAN,WAN (NETWORK TYPE)
7-PHYSICAL      (BITS) HARDWARE TRANSMISSION
OSI MODEL WEB REQUEST EXAMPLE 
  Application Layer: A user requests their browser to download a file from a web site. The HTTP protocol handler at this layer recognizes the secure request for a file on the web server and passes the request to the TLS Library.
  Session and Presentation Layer: The TLS library needs to create a secure channel for communication which requires the establishment of a connection with the destination. It passes a connection request to TCP.
  Transport Layer: The TCP handler receives the connection requests and creates a segment with the SYN flag (first part of the three-way handshake) set to the distant end server. The upper layer data is encapsulated with a TCP header and the segment is passed down to IP at the network layer.
  Network Layer: The network layer receives the segment and creates a packet by encapsulating the TCP header and data payload in an IP header. The correct IP information is added to the header for the destination IP address. The packet is then passed down to the Data-Link layer.
  Data-Link Layer: The data-link layer creates a frame encapsulating the data payload, TCP header, and IP header. The destination MAC address of the router is added to send the frame to it’s local destination. In addition to a header a trailer/footer is added containing a checksum and padding if needed to aid in frame synchronization. This is then passed to the physical layer.
  Physical Layer: The physical layer takes the binary data and injects it onto the physical media for which transmission is taking place (wireless or wired)

ETHERNET HEADER STRUCTURE (OSI LAYER 2 - DATA LINK):
  Preamble (7 BYTES)
    ALTERNATES 1 AND 0, TIME SYNC, NOT VISIBLE IN PACKET ANALYSIS
  SFD (START FRAME DELIMERTER) (1 BYTE)
    MARKS PREAMBLE END, START OF FRAME, NOT VISIBLE IN PACKET ANALYSIS
  MAC HEADER (12 BYTES)
    FIRST 6 BYTES (48 bits) = DESTINATION MAC 
    NEXT 6 BYTES (48 bits) = SOURCE MAC
    - ONLY TIME DEST ADDR BEFORE SOURCE TYPICALLY
  ETHERTYPE (2 BYTES)
    INDICATES NEXT PROTOCOL ENCAPSULATED, PROVIDER VIA LLC SUBLAYER.
    COMMON ETHERTYPES VIA IANA.org:
      0x0800 - IPv4
      0x0806 - ARP
      0x86DD - IPv6
      0x8100 - VLAN TAGGING 802.1q
  DATA / PAYLOAD (46-1500 BYTES)
    ACTUAL CONTENT
  FCS/CRC (FRAME CHECK SEQUENCE / CYCLICAL REDUNDANCY CHECK) (4 BYTES)
    QUALITY CHECK

802.1Q HEADER STRUCTURE (OSI LAYER 2 - DATA LINK):
 MAC HEADER (12 BYTES)
    FIRST 6 BYTES (48 bits) = DESTINATION MAC 
    NEXT 6 BYTES (48 bits) = SOURCE MAC
    - ONLY TIME DEST ADDR BEFORE SOURCE TYPICALLY
  VLAN TAG (4 BYTES)
    TAG PROTOCOL ID (2 BYTES)
      NEW EFFECTIVE ETHERTYPE
    TAG CONTROL (2 BYTES)
      PRIORITY CODE POINT (3 BITS)
      DROP ELIGIBLE INDICATOR (1 BIT)
    VLAN ID (12 BITS)
  ETHERTYPE (2 BYTES)
    INDICATES NEXT PROTOCOL ENCAPSULATED
  DATA / PAYLOAD (46-1500 BYTES)
    ACTUAL CONTENT
  FCS/CRC (FRAME CHECK SEQUENCE / CYCLICAL REDUNDANCY CHECK) (4 BYTES)
    QUALITY CHECK
ARP HEADER STRUCTURE (OSI LAYER 2 - DATA LINK):
  HTYPE - HARDWARE TYPE
  PTYPE - PROTOCOL TYPE
  HLEN  - HARDWARE LENGTH
  PLEN  - PROTOCOL LENGTH
  OPERATION: 1 FOR REQUEST, 2 FOR REPLY
  SHA - SENDER HARDWARE ADDRESS
  SPA - SENDER PROTOCOL ADDRESS
  THA - TARGET HARDWARE ADDRESS
  TPA - TARGET PROTOCOL ADDRESS
IPv4 HEADER STRUCTURE (OSI LAYER 3 - NETWORK):
  NAME       BITRANGE   LENGTH   DESCRIPTION
  VERSION     0-3       4        IP VERSION OF THE PACKET—ALWAYS 4 IN IPV4.
  IHL         4-7       4        REPRESENTS THE NUMBER OF 32-BIT (4-BYTE) WORDS IN THE HEADER. IF IHL IS GREATER THAN 5, IT INDICATES THAT IP OPTIONS ARE PRESENT.
  DSCP        8-13      6        INDICATES THE TYPE OF TRAFFIC THAT IS BEING PASSED (E.G., VOIP, VIDEO).
  ECN         14-15     2        ECN IS USED TO PROVIDE END-TO-END TRAFFIC CONGESTION NOTIFICATION; USUALLY 0.
  LENGTH      16-31     16       REPRESENTS THE SIZE OF THE ENTIRE IP PACKET IN BYTES, INCLUDING THE IP HEADER.
  ID          32-47     16       IDENTIFY FRAGMENTED PACKETS.
  FLAGS       48-50     3        USED FOR FRAGMENTATION OF IP PACKETS
  OFFSET      51-63     13       IDENTIFIES THE OFFSET OF A FRAGMENTED PACKET’S POSITION, RELATIVE TO THE ORIGINAL PACKET, IN MULTIPLES OF 8 BYTES.
  TTL         64-71     8        DETERMINES THE MAXIMUM NUMBER OF TIMES A PACKET MAY BE FORWARDED. EACH ROUTER THAT FORWARDS A PACKET DECREMENTS THE TTL BY ONE.
  PROT        72-79     8        IDENTIFIES THE PROTOCOL HEADER THAT IS USED IN THE ENCAPSULATED PAYLOAD. USES IP PROTOCOL CODES, E.G., TCP = 6 (0X06).
  CHECKSUM    80-95     16       THE CHECKSUM IS CALCULATED FROM THE IP HEADER ONLY. CAN BE USED TO INDICATE TAMPERING OR CORRUPTION.
  SOURCE ADDR 96-127    32       SOURCE IPV4 ADDRESS OF THE PACKET.
  DEST ADDR   128-159   32       DESTINATION IPV4 ADDRESS OF THE PACKET.
  OPTIONS     160-256   128      OPTIONS PRESENT IF IHL > 5. CAN RANGE FROM 6 TO 15 WORDS
  !!!ALL LENGTHS PROVIDED ARE IN BITS!!!
IPv6 HEADER STRUCTURE (OSI LAYER 3 - NETWORK):
  NAME        BITRANGE  LENGTH   DESCRIPTION
  VERSION     0-3       4        IP VERSION OF THE PACKET—ALWAYS 6 IN IPV6.
  CLASS       4-11      8        DIFFERENTIATE BETWEEN THE PACKETS GENERATED BY IT BY ASSOCIATING DIFFERENT DELIVERY PRIORITIES TO THEM.
  LABEL       12-31     20       HINT TO ROUTERS AND SWITCHES WITH MULTIPLE OUTBOUND PATHS THAT THESE PACKETS SHOULD STAY ON THE SAME PATH. (E.G., VOIP, VIDEO).
  LENGTH      32-47     16       THE SIZE OF THE PAYLOAD IN OCTETS. THE LENGTH IS SET TO ZERO WHEN A PAYLOAD EXCEEDS MAXIMUM CAPACITY OF 64 KILOBYTES.
  HEADER      48-55     8        IDENTIFIES THE TYPE OF HEADER THAT IMMEDIATELY FOLLOWS THE IPV6 HEADER USUALLY BUT NOT EXCLUSIVELY TCP OR UDP.
  LIMIT       56-53     8        EQUIVALENT TO THE TTL FIELD IN IPV4 PACKET HEADERS. THIS FIELD DECREASES BY 1 EACH HOP IT MAKES.
  SOURCE ADDR 64-191    128      SOURCE IPV6 ADDRESS OF THE PACKET.
  DEST ADDR   192-319   128      DESTINATION IPV6 ADDRESS OF THE PACKET.
  !!!ALL LENGTHS PROVIDED ARE IN BITS!!!
IPv4 AND IPv6 HEADER COMPARISON AND GENERAL NOTES
  - SERVE SAME PURPOSE, THUS MANY IDENTICAL OR SIMILAR FIELDS
  - IN IPv4, IHL FIELD CAN INDICATE WHETHER IP OPTIONS ARE ENABLED, WHICH IS TYPICALLY SUSPICIOUS
  - NOT POSSIBLE IN IPv6 EXCLUDING IPv6 EXTENSION HEADERS
  - FINGERPRINTING VIA INITIAL TTL VALUE:
      NAME                   INITIAL TTL  WINDOW SIZE
      LINUX (KERNEL 2.4,2.6)  64          5840
      CHROMIUM                64          5720
      FREEBSD                 64          65535
      WINDOWS XP              128         65535
      WINDOWS VISTA,7,2008    128         8192
      CISCO ROUTER (IOS 12.4) 255         4128
ICMP INFO (OSI LAYER 3 - NETWORK):
  ICMP
TCP HEADER STRUCTURE (OSI LAYER 4 - TRANSPORT):
  NAME          BITRANGE  LENGTH          DESCRIPTION
  SOURCE PORT   0-15      16              SPECIFIES THE PORT THAT LOCALHOST IS LISTENING ON FOR TRAFFIC DURING THIS COMMUNICATION.
  DEST PORT     16-31     16              SPECIFIES THE PORT ON THE RECEIVING(DESTINATION) HOST THAT IT IS LISTENING ON FOR THIS COMMUNICATION.
  SEQ NUM       32-63     32              IF SYN FLAG SET: THIS IS THE INITIAL(STARTING) SEQUENCE NUMBER; IF SYN FLAG IS NOT SET: THIS IS THE SEQUENCE NUMBER OF THE CURRENT SEGMENT THAT HAS INCREMENTED FROM THE STARTING SEQUENCE NUMBER.
  ACK NUM       64-95     32              IF ACK FLAG IS SET, IT SPECIFIES THE NEXT SEQUENCE NUMBER THE SENDER IS EXPECTING. SENDER’S SEQUENCE NUMBER +1.
  OFFSET        96-99     4               THE SIZE OF TCP HEADER IN 32-BIT WORDS. MINIMUM=5, MAX=15. USED IF THERE ARE TCP OPTIONS.
  RESERVED      100-102   3               RESERVED FOR FUTURE USE AND SHOULD BE SET TO ZERO.
  NS            103       1               OPTIONAL ADDITION TO THE L3 ECN. 
  FLAGS         104-111   8               CONTROL BITS: CWR, ECE, URG, ACK, PSH, RST, SYN, FIN
  WIN SIZE      112-127   16              SIZE (IN BYTES) THAT THIS HOST IS ABLE TO RECEIVE. THIS CAN BE DIFFERENT ON EACH END AND CAN CHANGE DURING THE COURSE OF THE CONNECTION.
  CHECKSUM      128-143   16              CALCULATION DONE USING THE TCP HEADER, PAYLOAD, AND THE PSEUDO-HEADER (SOURCE IP, DESTINATION IP, AND PROTOCOL NUMBER (0X06))
  URG POINTER   144-159   16              IF URG IS SET THEN THIS IS AN OFFSET (RANGE) FROM THE SEQUENCE NUMBER INDICATING THE LAST URGENT DATA BYTE.
  OPTIONS       <VAR>      0-320 && /32=1 VARIABLE OPTIONS. REFERENCE http://www.networksorcery.com/enp/protocol/tcp.htm#OptionsFOR EXAMPLES.
  !!!ALL LENGTHS PROVIDED ARE IN BITS!!!
  TCP FLAGS:
    CWR 128
    ECE 64
    URG 32
    ACK 16
    PSH 8
    RST 4
    SYN 2
    FIN 1
  TCP CONNECTION PHASES
  1 - CONNECTION ESTABLISHMENT:
    -3 WAY HANDSHAKE, SYN, SYN-ACK, ACK
  2 - DATA TRANSFER:
    -PSH-ACK, ACTUAL TRANSMISSION OF DATA
  3 - CONNECTION TERMINATION:
    -4 WAY TERMINATION: FIN-ACK, ACK, FIN-ACK, ACK (FIN-ACK, ACK x2)
  4 - TCP OPTIONS:
    -OPTION 0- END OF OPTIONS LIST
    -OPTION 1- NO OPTIONS OR NOP
    -OPTION 2- MAXIMUM SEGMENT SIZE (MSS)
    -OPTION 3- TCP WINDOW SCALING
UDP HEADER STRUCTURE (OSI LAYER 4 - TRANSPORT):
  NAME          BITRANGE  LENGTH          DESCRIPTION
  SOURCE PORT   0-15      16              SPECIFIES THE PORT THAT LOCALHOST IS LISTENING ON FOR TRAFFIC DURING THIS COMMUNICATION.
  DEST PORT     16-31     16              SPECIFIES THE PORT ON THE RECEIVING(DESTINATION) HOST THAT IT IS LISTENING ON FOR THIS COMMUNICATION.
  LENGTH        32-47     16              SPECIFIES THE LENGTH OF THE UDP HEADER AND DATA.
  CHECKSUM      48-63     16              USED FOR ERROR CHECKING OF THE HEADER AND DATA. THIS IS OPTIONAL FOR IPV4 AND MANDATORY IN IPV6.

NETWORK TRAFFIC SNIFFING NOTES
  MADE POSSIBLE BY libpcap, winpcap (DEPRICATED), npcap
  BERKELEY PACKET FILTERS:
    tcpdump {A} [B:C] {D} {E} {F} {G}
    A = PROTOCOL (ether | arp | ip | ip6 | icmp | tcp | udp)
    B = HEADER BYTE OFFSET
    C = OPTIONAL BYTE LENGTH. CAN BE 1,2,4 (default 1)
    D = OPTIONAL: BITWISE MASK (&)
    E = OPERATOR (= | == | > | < | <= | >= | != | () | << | >>)
    F = RESULT OF EXPRESSION
    G = OPTIONAL: LOGICAL OPERATOR (&& ||) TO BRIDGE EXPRESSIONS
    tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 || tcp[2:2] != 23)'
    EXAMPLE: udp[0:2] = 53 || udp[2:2] = 53 RETURNS ALL UDP PACKETS WITH EITHER A DESTINATION OR SOURCE PORT OF 53, AS IT ITERATES STARTING FROM THE 0TH BITVALUE TO TWO BYTES AHEAD
  BITWISE MASKING:
    FILTERING DOWN TO THE BIT RATHER THAN BYTE LEVEL, FINER-TOOTHED COMB
    ip[0] & 0x0F > 0x05 (ONLY CARES ABOUT SECOND NIBBLE, MASK OF 00001111
    MOST EXCLUSIVE:  tcp[13] = 0x11 (ALL BITS MUST MATCH)
    LESS EXCLUSIVE:  tcp[13] & 0x11 = 0x11  
    LEAST EXCLUSIVE: tcp[13] & 0x11 !=0 
    https://net.cybbh.io/public/networking/latest/lesson-1-fundamentals/fg.html#_2_4_message_formatting_method (SEARCH BY FILTER LOGIC)
    !!!FILTER LOGIC ACCEPTS DECIMAL VALUES! JUST FUCKING USE THOSE!!!
------------------------------------------------------------------------------------------------------------------------
