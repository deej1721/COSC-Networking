------------------------------------------------------------------------------------------------------------------------
NETWORKING DAY 4 LINKS:
  STUDENT FG: https://net.cybbh.io/public/networking/latest/lesson-2-programming/fg.html
  SLIDES: https://net.cybbh.io/-/public/-/jobs/842494/artifacts/modules/networking/slides/2-Packet_Creation_and_Socket_Programming.html
  PYTHON REFERENCE LINKS:
    SOCKET: https://docs.python.org/3/library/socket.html
    STRUCT: https://docs.python.org/3/library/struct.html
    SYS: https://docs.python.org/3/library/sys.html
------------------------------------------------------------------------------------------------------------------------
GENERAL NOTES
SOCKET TYPES:
  USER SPACE SOCKETS:
    - MOST COMMON, CREATION DOES NOT REQUIRE ELEVATED PERMS AND TYPES ARE AS FOLLOWS:
    STREAM SOCKET - CONNECTION ORIENTED AND SEQUENCED; METHODS FOR CONNECTION ESTABLISHMENT AND TEAR-DOWN. USED WITH TCP, SCTP, AND BLUETOOTH
    DATAGRAM SOCKET - CONNECTIONLESS; DESIGNED FOR QUICKLY SENDING AND RECEIVING DATA. USED WITH UDP
  KERNEL SPACE SOCKETS:
    - DIRECT HARDWARE ACCESS ON BEHALF OF USER APP, REQUIRES ELEVATED PERMS AND ARE AS FOLLOWS:
    RAW SOCKET - DIRECT SENDING AND RECEIVING OF IP PACKETS WITHOUT AUTOMATIC PROTOCOL-SPECIFIC FORMATTING.
SOCKET CREATION IN PYTHON3:
  SYNTAX:
    import socket
    s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
    CONSTANTS:
      FAMILY: AF_INET (DEFAULT), AF_INET6, AF_UNIX
      TYPE: SOCK_STREAM (DEFAULT), SOCK_DGRAM, SOCK_RAW
      PROTO: 0 (DEFAULT), IPPROTO_RAW
  DEMO:
    vim stream.py
      #import socket
      #socket.function() SYNTAX
      #CREATE REFERENCEABLE LIBRARY ALIAS WITH: from socket as sock (from LIBRARY as ALIAS)
      #REFERENCE ONE FUNCTION IN LIBRARY WITHOUT IMPORTING THE WHOLE THING:
        #from socket import FUNCTION
        #function()
      #USE JUST FUNCTION NAMES RATHER THAN LIBRARY.FUNCTION REFERENCE SCHEME:
        from socket import * 
        function()
        functionEtc()
      import socket
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) CREATES SOCKET s WITH MOST SPECIFIC SYNTAX
      s = socket.socket CREATES SOCKET s USING DEFAULT CONSTANTS, SHORTER SYNTAX!
      ip = '127.0.0.1'
      port = 12345
      s.connect((ip, port))
      #PREFIX b TO STRING SENDS IT AS A BYTES-LIKE OBJECT. \n FOR NEWLINE
      s.send(b'Hello\n')
      #recvfrom BUFFERSIZE SHOULD BE POWER OF 2 AND NOT "TOO BIG"
      response, conn = s.recvfrom(1024)
      #BYTES-LIKE OBJECTS MUST BE DECODED INTO UTF-8 (DEFAULT)
      print.response.decode()
      s.close()
  DATAGRAM SOCKET DEMO:
    vim dgram.py
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    ip = '127.0.0.1'
    port = 12345
    s.sendto(b'Hello\n', (ip,port))
    response, conn = s.recvfrom(1024)
    print(response.decode())
  RAW SOCKET DEMO:
  vim rawsock.py
    import socket FPR SOCKET BUILDING
    import sys FOR SYSTEM LEVEL COMMANDS
    from struct import * FOR PACKET STRUCTURE ESTABLISHMENT (DIRECT FUNCTION AND METHOD ACCESS)
    #CREATE RAW SOCKET BELOW:
      try:
        s = socket.socket(sock.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
      except socket.error as msg:
        print(msg)
        sys.exit()
      packet = ''
      srcIp = "10.1.0.2"
      dstIp = "10.3.0.2"
      #ADD IPv4 HEADER INFO
      ipVerIHL = 69 #0x45 IN DECIMAL (FOR VERSION AND INTERNET HEADER LENGTH)
      ipTos = 0 #DSCP + ECN FIELD COMBO
      ipLen = 0 #KERNEL FILLS ACTUAL PACKET LENGTH
      ipId = 12345 #SETS PACKET IP ID 
      ipFrag = 0 #DISABLES IP FRAGMENTATION
      ipTtl = 64 #SETS PACKET TIME TO LIVE VALUE WHEN LEAVING MACHINE
      ipProto = 6 #SETS TCP PROTOCOL. VALUES TCP(6)/UDP(17) REQUIRE ADDITIONAL HEADERS AS SEEN BELOW!
      ipCheck = 0 #KERNEL FILLS IN PACKET CHECKSUM
      ipSrcAdd = socket.inet_aton(srcIp) #CONVERT SOURCE IP TO 32bit BINARY NUMBER
      ipDstAdd = socket.inet_aton(dstIp) #CONVERT DESTINATION IP TO 32bit BINARY NUMBER
      ipHeader = pack('!BBHHHBBH4s4s', ipVerIHL, ipTos, ipLen, ipId, ipFrag, ipTtl, ipProto, ipCheck, ipSrcAdd, ipDstAdd, ipHeader) #! LETS KERNEL KNOW DATA IS BEING SENT BIG ENDIAN, B=BYTES, H=HALF-WORD, 
      message = b'This is a message!'
      packet = ipHeader + message
      #SEND THE PACKET BELOW:
      s.sendto(packet, (dst_ip, 0))
RAW TCP SOCKETS DEMO:
cp rawsock.py tcpsock.py
vim tcpsock.py
  #DIRECTLY BELOW import sys IS AS FOLLOWS:
  import array
  #AFTER ipHeader (DELETE message AND BELOW):
    tcpSrc = 54321 #SOURCE PORT
    tcpDst = 7777 #DESTINATION PORT
    tcpSeq = 454 #SEQUENCE NUMBER
    tcpAckSeq = 0 #TCP ACK SEQUENCE NUMBER
    tcpDataOff = 5 #DATA OFFSET, SPECIFIES TCP HEADER SIZE IN 4-BYTE WORDS
    tcpReserve = 0 #3 RESERVE AND + ns FLAG IN RESERVE FIELD
    tcpFlags = 0 #TCP FLAGS FIELD (BEFORE BITS TURNED ON)
    tcpWin = 65535 #WINDOW SIZE MAX
    tcpChk = 0 #TCP CHECKSUM, CALCULATED LATER ON
    tcpUrgPtr = 0 #URGENT POINTER (ONLY IF urg FLAG SET)
    #COMBINE TCP OFFSET AND RESRVE FIELDS BY COMBINING LEFT SHIFTED 4 BITS TCP OFFSET AND RESERVE FIELD AS DONE BELOW:
    tcpOffRes = (tcpDataOff << 4) + tcpReserve #"<<" OPERATOR IS FOR BIT SHIFTING LEFT, ">>" SHIFTS BITS RIGHT
    #TCP FLAGS BY BIT STARTING FROM RIGHT TO LEFT BELOW:
    tcpFin = 0
    tcpSyn = 0
    tcpRst = 0
    tcpPsh = 0
    tcpAck = 0
    tcpUrg = 0
    tcpEce = 0
    tcpCwr = 0
    #COMBINE TCP FLAGS VIA LEFT SHIFTING BIT LOCATIONS, ADDING BITS TOGETHER BELOW:
    tcpFlags = tcpFin + (tcpSyn << 1) + (tcpRst << 2) + (tcpPsh << 3) + (tcpAck << 4) + (tcpUrg << 5) + (tcpEce << 6) + (tcpCwr << 7)
    # "!" IN PACK FORMAT STRING MEANS "NETWORK ORDER" AS SEEN BELOW:
    tcpHdr = pack('!HHLLBBHHH', tcpSrc, tcpDst, tcpSeq, tcpAckSeq, tcpOffRes, tcpFlags, tcpWin, tcpChk, tcpUrgPtr)
    usrData = n'Hello! Is this hidden?'
    #PSEUDO HEADER FIELDS BELOW:
    srcAddr = socket.inet_aton(srcIp)
    dstAddr = socket.inet_aton(dstIp)
    reserved = 0
    protocol = socket.IPPROTO_TCP
    tcpLen = len(tcpHdr) + lemn(usrData)
    #PACK PSEUDO HEADER AND COMBINE WITH USER DATA BELOW:
    psHdr = pack('!4s4sBBH', srcAddr, dstAddr, reserved, protocol, tcpLen)
    psHdr = psHdr + tcpHdr + usrData
    def checksum(data):
      if len(data) %2 != 0:
        data += b'\0'
      res = sum(array.array("H",data))
      res = (res >> 16) + (res & 0xffff) 
      res += res >> 16
      return (~res) & 0xffff # "~" (TILDE) CHARACTER "FLIPS THE BITS" OF WHATEVER VARIABLE ITS APPLIED TO
      tcpChk = checksum(psHdr)
      #PACK TCP HEADER TO FILL WITH CORRECT CHECKSUM - CHECKSUM IS NOT IN NETWORK BYTE ORDER BY DEFAULT!
      tcpHdr = pack('!HHLLBH', tcpSrc, tcpDst, tcpSeq, tcpAckSeq, tcpOffRes, tcpFlags, tcpWin) + pack('H', tcpChk) + pack('!H', tcpUrgPtr)
      #COMBINE ALL HEADERS AND USER DATA BELOW:
      packet = ipHdr + tcpHdr + usrData
      #SEND THE PACKET BELOW!
      s.sendto(packet, (dstIp, 0))
NAVIGATE TO: (WIRESHARK->PREFERENCES->"DISABLE RELATIVE SEQUENCE NUMBERS") TO SHOW PROPER SEQUENCE NUMBER ONCE RUN!
REQUIREMENTS:
    - MUST INCLUDE IP AND FOLLOW ON HEADERS
    - REQUIRES GUIDANCE FROM "REQUEST FOR COMMENTS" RFC TO FOLLOW HEADER STRUCTURE PROPERLY (SEE RFC 791 SECTION 3 FOR DIRECTIONS)
------------------------------------------------------------------------------------------------------------------------
CTFD CHALLENGES -Networking - 2 - Socket Creation and Packet Manipulation
Gorgas Socket Manipulation (GPM)
XX OCT 2023
Start Time: 1300
Duration: 4 hours
Type of Operation: Socket Programming for Datagram, IP, TCP
Objective: Gorgas Cyber Forces are preparing for an upcoming mission and have requested assistance with packet manipulation. They need to send custom message to allied forces throughout the region; however, they currently do not have anyone available that understands how. Using Python your team is required to complete each of the following tasks (Specific details for each task are identified in the challenge):
Scheme of Maneuver:
> Linux Workstations:
→ T1: INTERNET_HOST
-→ T2: BLUE_DMZ_Host
Target Section:
T1
  Hostname: INTERNET_HOST
  IP: PROVIDED FLOAT IP
  OS: Linux
  Creds: PROVIDED CREDENTIALS
  Last Known SSH Port: 22
  PSP: none
  Malware: none
  Action: Send a Datagram Socket Message to this host
T2
  Hostname: BLUE_DMZ_Host-1
  IP: 172.16.1.15
  OS: unknown
  Creds:unknown
  Last Known SSH Port: unknown
  PSP: Unknown
  Malware: Unknown
  Action: Send a Stream Socket Message to this host
---
AddressFamilies 5 Level I Challenge
What are the 3 Address Families associated with the python3 socket module?
  ANSWER: AF_INET (the default), AF_INET6 , AF_UNIX
Connections 5 Level I Challenge
What are the two socket functions called to open a connection and to disconnect from that connection?
  ANSWER: socket.connect(), socket.close()
Header Preparation 5 Level I Challenge
What python3 library function is utilized to combine the various pieces of your raw socket packet into network order?
  ANSWER: struct.pack
Missing Data 5 Level I Challenge
What must be manually created with raw sockets that stream and datagram sockets creates for you?
  ANSWER: header
Sending UDP 5
Level I Challenge
What function within the socket module allows you to Send data to a socket, while not already being connected to a remote socket?
  ANSWER: socket.sendto()
Transport Layer Sockets 5 Level I Challenge
Provide an example of the two required items needed to be set in order to send a Datagram or Stream socket? (excluding any of the socket.socket functions)
  ANSWER: ip port
Objects 5 Level I Challenge
When sending data across a connection, what must a string be converted to before being sent due to encoding?
  ANSWER: bytes-like object
Stream Socket Message Sender 10 Level II Challenge
Gorgan Forces have requested you get a message to one of their remote teams that are utilizing the BLUE_DMZ_HOST-1. Utilizing the criteria they provided, generate a stream socket with python3:
Coded information was placed into the video below. Look at the note the woman passes to the man. https://youtu.be/6WTdTwcmxyo?t=35
From your INTERNET-HOST to the BLUE_DMZ_HOST-1 Port number = #Last four digits on the note Message = #Name on the note (First letter capitalized)
  ANSWER: f8fa738ae384ee76751805dd6829061b
Datagram Socket Message Sender 10 Level II Challenge
Gorgan Forces have requested you get a message to one of their remote teams that are utilizing the INTERNET_HOST. Utilizing the criteria they provided, generate a datagram socket with python3:
Coded information was placed into the video below. Listen to the words in the video. https://youtu.be/OuK4OcMUGcg?t=67
Send to your INTERNET-HOST localhost. Port number = #The number of fists Message = #The name of the band (First letter capitalized)
  ANSWER:
Raw IPv4 TCP Sockets 15
Level III Challenge
Gorgan forces, tool development cell have provided RAWSOCK2.py for your teams use, it defines the basic structure of the desired result.
Create a raw socket and code your message into the socket When viewing in Wireshark, the packet should not be malformed
Target IP: 172.16.40.10
IP ID: 2020
TCP Src port: 54321
TCP Dst port: 1234
SEQ Number: 90210
ACK Number: 30905
TCP flag: SYN
The flag will be provided by the Mission Command once you complete the activity. Provide the Wireshark Packet Capture.
  ANSWER:
